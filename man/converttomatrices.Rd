% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rrapidmarkovFunctions.R
\name{converttomatrices}
\alias{converttomatrices}
\title{Format state-transition matrices}
\usage{
converttomatrices(states, probs, cycles = NULL)
}
\arguments{
\item{states}{Either integer specifying number of health states or a vector
of state names}

\item{probs}{Matrix of sampled probabilities.}

\item{cycles}{Number of cycles to run (only required if stationary matrix)}
}
\value{
List of length sims, where $simNN = array of size nStates x nStates
  x cycles, containing state transition matrices, where nStates = number of
  health states.
}
\description{
Helper function to format a 2d matrix of sampled transition probabilities
  into a list of 3d arrays suitable for input into runmarkov and psamarkov
}
\examples{
#Stationary model

library(gtools)
sims <- 10
set.seed(34)
probs <- cbind(rdirichlet(sims,c(80, 10, 10)),
              rdirichlet(sims,c(0, 7, 3)),
              rdirichlet(sims,c(0, 0, 1)))
colnames(probs) <- c("S1>S1", "S1>S2", "S1>S3",
                     "S2>S1", "S2>S2", "S2>S3",
                     "S3>S1", "S3>S2", "S3>S3")
states <- c("alive", "progressive", "dead")
cycles <- 5
converttomatrices(states, probs, cycles)

# without specifying state names:
states <- 3
converttomatrices(states, probs, cycles)

#Non-stationary model

library(gtools)
sims <- 10
set.seed(34)
probs = cbind(rdirichlet(sims,c(80, 10, 10)),
              rdirichlet(sims,c(0, 7, 3)),
              rdirichlet(sims,c(0, 0, 1)),

              rdirichlet(sims,c(70, 20, 10)),
              rdirichlet(sims,c(0, 7, 3)),
              rdirichlet(sims,c(0, 0, 1)))
colnames(probs) <- c("c1_S1>S1", "c1_S1>S2", "c1_S1>S3",
                     "c1_S2>S1", "c1_S2>S2", "c1_S2>S3",
                     "c1_S3>S1", "c1_S3>S2", "c1_S3>S3",

                     "c2_S1>S1", "c2_S1>S2", "c2_S1>S3",
                     "c2_S2>S1", "c2_S2>S2", "c2_S2>S3",
                     "c2_S3>S1", "c2_S3>S2", "c2_S3>S3")
states <- c("alive", "progressive", "dead")
converttomatrices(states, probs)
}
