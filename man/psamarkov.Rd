% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rrapidmarkovFunctions.R
\name{psamarkov}
\alias{psamarkov}
\title{Probabilistic analysis of Markov trace}
\usage{
psamarkov(
  transitionsMatrix,
  startingStates,
  cycles = NULL,
  stateNames = NULL,
  cores = 1
)
}
\arguments{
\item{transitionsMatrix}{Output of converttomatrices()}

\item{startingStates}{Vector of starting states.  Must be of length n
where n = number of states and sum(startingStates) = 1.}

\item{cycles}{Number of cycles to run (only required if stationary matrix)}

\item{stateNames}{Vector of state names (optional)}

\item{cores}{Number of processor cores to use}
}
\value{
A list comprising:

 $means - matrix of size cycles x states reporting mean proportions of
 cohort in each state, each cycle.

 $LCL - matrix as above reporting Lower 95\% Credibility/Confidence Interval

 $UCL - matrix as above reporting Upper 95\% Credibility/Confidence Interval

 $raw - array of size cycles x states x sims, reporting raw data from
 each simulation
}
\description{
Calculates proportions of cohort in each health state at each time point for
multiple Monte Carlo simulations.
}
\examples{
#Stationary model
# Generate PSA samples
library(gtools)
sims <- 10
set.seed(34)
probs = cbind(rdirichlet(sims, c(80, 10, 10)),
              rdirichlet(sims, c(0, 7, 3)),
              rdirichlet(sims, c(0, 0, 1)))
colnames(probs) <- c("S1>S1", "S1>S2", "S1>S3",
                     "S2>S1", "S2>S2", "S2>S3",
                     "S3>S1", "S3>S2", "S3>S3")

# set up Markov model
stateNames <- c("alive", "progressive", "dead")
startingStates <- c(1, 0, 0)
cycles <- 20
transitionsMatrix <- converttomatrices(stateNames, probs, cycles)
psamarkov(transitionsMatrix, startingStates, cycles, stateNames)

#Non-stationary model
#Note: See userguide vignette for detailed explanation
#Assumptions:
#a) Probability of moving to progressive health state increases with age
#   following Weibull function.
#b) Probability of death from 'alive' state increases with age, using
#   life tables.
#c) Starting age of modelled cohort is 60.
#d) Probability of death from 'progressive' state is approximately 30\% (time-
#   invariant).

stateNames <- c("alive", "progressive", "dead")
cycles <- 5

sims <- 10
set.seed(100)
WeibullSamples <- data.frame(shapes = rlnorm(sims, log(2), log(1.05)),
                             scales = rlnorm(sims, log(0.001), log(1.1)))
startAge <- 60
p_AtoP <- t(apply(WeibullSamples, 1,
                  function(y) sapply((startAge + 1):(startAge + cycles - 1),
                                     function(x) {
                                       1 - exp(y[2] * ((x - 1)^y[1] - x^y[1]))
                                     }
                                    )
                 )
           )
colnames(p_AtoP) <- paste0("p_AtoP_Age",
                           (startAge + 1):(startAge + cycles - 1))

lifeTable <- c(0.005104, 0.005600, 0.006303, 0.006832)

nStates <- length(stateNames)
probs <- matrix(data = NA, nrow = sims, ncol = nStates^2 * (cycles - 1))
colnames(probs) <- unlist(lapply(1:(cycles - 1),
                      function(i) c(paste0("A>>A", i), paste0("A>>P", i),
                                    paste0("A>>D", i), paste0("P>>A", i),
                                    paste0("P>>P", i), paste0("P>>D", i),
                                    paste0("D>>A", i), paste0("D>>P", i),
                                    paste0("D>>D", i))))

StayingAlive <- 1 - p_AtoP - matrix(rep(lifeTable, sims),
                                    nrow = sims, byrow = TRUE)
colnames(StayingAlive) <- paste0("p_AtoA_Age",
                                 startAge:(startAge + cycles - 2))

p_AtoD <- matrix(rep(lifeTable, sims), nrow = sims, byrow = TRUE)
colnames(p_AtoD) <- paste0("p_AtoD_Age", startAge:(startAge + cycles - 2))

probs[,seq(1, (cycles - 1) * nStates^2, nStates^2)] <- StayingAlive
probs[,seq(2, (cycles - 1) * nStates^2, nStates^2)] <- p_AtoP
probs[,seq(3, (cycles - 1) * nStates^2, nStates^2)] <- p_AtoD

library(gtools)
FromProgressive <- rdirichlet(sims,c(0, 7, 3))
for (i in 1:3) {
  probs[, seq(i + 3, (cycles - 1) * nStates^2, nStates^2)] <-
                                                     FromProgressive[, i]
}
FromDead <- matrix(data = rep(c(0, 0, 1), sims), nrow = sims, byrow = TRUE)
for (i in 1:3) {
  probs[, seq(i + 6, (cycles - 1) * nStates^2, nStates^2)] <- FromDead[,i]
}

# convert to format for PSAmarkov()
transitionsMatrix <- converttomatrices(stateNames,probs,cycles)

# define starting states and run the analysis
startingStates <- c(1,0,0)
psamarkov(transitionsMatrix,startingStates,stateNames = stateNames)
}
