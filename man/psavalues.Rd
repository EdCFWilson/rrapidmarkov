% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rrapidmarkovFunctions.R
\name{psavalues}
\alias{psavalues}
\title{Calculate expected values (eg costs and QALYs) from PSA output}
\usage{
psavalues(
  markovTrace,
  stateValues,
  transPeriod = 1,
  discountRate = 0.035,
  QALYs = FALSE
)
}
\arguments{
\item{markovTrace}{Output of psamarkov()}

\item{stateValues}{Matrix of state values (eg costs or health state
utilities).  nCols must equal number of states, nrows must equal number of
simulations}

\item{transPeriod}{Model transition period.  Must be entered as a fraction
of a year.  Eg day = 1/365, week = 1/52, calendar month = 1/12, lunar
(4-week) month = 1/13.}

\item{discountRate}{Annual discount rate.}

\item{QALYs}{Set to true when calculating QALYs from health state utilities
to adjust for the transition period (eg if transitionPeriod = 1/2, then 1
cycle in full health = 0.5QALYs)}
}
\value{
A list comprising:

  $undisc$mean - matrix of size (cycles+1) x (states+1) reporting
  undiscounted mean values by state and cycle.  Final column = row totals,
  final row = column totals.

  $undisc$LCL - matrix as above reporting Lower 95\% Credibility/Confidence
    Interval

  $undisc$UCL - matrix as above reporting Upper 95\% Credibility/Confidence
    Interval

  $undisc$raw - array of size (cycles+1) x (states+1) x sims, reporting raw
    undiscounted values from each simulation

  $undisc$total - matrix of size 1x3, reporting undiscounted mean, LCL and
    UCL values (=bottom right cell of $undisc$mean, $LCL and $UCL
    respectively)

  $undisc$SAVI - vector of total values from each simulation (=bottom right
    cell of each slice of $undisc$raw), in a format which can easily be
    input into the
    \href{https://github.com/Sheffield-Accelerated-VoI/SAVI-package}{SAVI}
    package.

  $disc - sub-lists with the same structure as $undisc, but discounted at
    discountRate per annum.
}
\description{
Multiplies output of PSAMarkov() by state costs, utilities or other value
}
\examples{
library(gtools)
sims <- 10
set.seed(34)
probs = cbind(rdirichlet(sims, c(80, 10, 10)),
              rdirichlet(sims, c(0, 7, 3)),
              rdirichlet(sims, c(0, 0, 1)))
colnames(probs) <- c("S1>S1", "S1>S2", "S1>S3",
                     "S2>S1", "S2>S2", "S2>S3",
                     "S3>S1", "S3>S2", "S3>S3")
states <- c("alive", "progressive", "dead")
startingStates <- c(1, 0, 0)
cycles <- 10
transitionsMatrix <- converttomatrices(states, probs, cycles)
output <- psamarkov(transitionsMatrix, startingStates, cycles, states)

stateCosts <- cbind(rgamma(sims, 10, 1/50),
                    rgamma(sims, 1, 1/1000),
                    rep(0, sims))
stateUtilities <- cbind(rbeta(sims, 800, 200),
                        rbeta(sims, 50, 50),
                        rep(0, sims))

psavalues(output, stateCosts)
psavalues(output, stateUtilities, QALYs = TRUE)
}
